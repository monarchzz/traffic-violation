version: "3.8"
services:
  dev:
    container_name: nestjs-api-dev
    image: nestjs-api-dev:1.0.0
    build:
      dockerfile: Dockerfile
      context: .
      target: development
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run start:dev
    depends_on:
      - elasticsearch
      # - kibana
    links:
      - elasticsearch
    networks:
      - nesjs-network
    ports:
      - 8080:8080
      - 9229:9229

  # prod:
  #   container_name: nestjs-api-prod
  #   image: nestjs-api-prod:1.0.0
  #   build:
  #     dockerfile: Dockerfile
  #     context: .
  #     target: production
  #   volumes:
  #     - .:/usr/src/app
  #     - /usr/src/app/node_modules
  #   command: npm run start:prod
  #   depends_on:
  #     - elasticsearch
  #   links:
  #     - elasticsearch
  #   networks:
  #     - nesjs-network
  #   ports:
  #     - 8080:8080
  #     - 9229:9229
  #   restart: unless-stopped

  elasticsearch:
    container_name: elasticsearch-nestjs
    # build: .
    image: tunnm/docker-es-cococ-tokenizer:7.12.1
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - nesjs-network
    # mem_limit: 1.5g
    environment:
      ES_JAVA_OPTS: "-Xmx2g -Xms2g"
      bootstrap.memory_lock: "true"
      discovery.type: "single-node"
      http.host: "0.0.0.0"
      action.auto_create_index: ".watches,.triggered_watches,.watcher-history-*"
      network.host: "0.0.0.0"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      memlock:
        hard: -1
        soft: -1

  kibana:
    container_name: kibana-nestjs
    image: docker.elastic.co/kibana/kibana:7.12.1
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-nestjs:9200
    networks:
      - nesjs-network
    depends_on: 
      - elasticsearch

  proxy:
    image: nginx:alpine
    container_name: web-proxy
    restart: unless-stopped
    volumes:
      - ./proxy.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 80:80
    depends_on:
      - dev
    networks:
      - nesjs-network

networks:
  nesjs-network:
    driver: bridge
